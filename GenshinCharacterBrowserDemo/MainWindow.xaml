<Window
    x:Class="GenshinCharacterBrowserDemo.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:GenshinCharacterBrowserDemo"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:model="clr-namespace:GenshinCharacterBrowserDemo.Model"
    xmlns:vm="clr-namespace:GenshinCharacterBrowserDemo.ViewModel"
    Title="MainWindow"
    Width="1200"
    Height="800"
    mc:Ignorable="d">
    <Window.Resources>
        <model:ECampToString x:Key="campToString" />
        <vm:ImageToGrayImage x:Key="convGrayImage" />

        <!--定义一个动画，用于角色名字的进入动画，即，先移出去100，然后通过动画再移回来(TargetProperty为TextBlock>RenderTransForm>TranslateTransform>X)，同时控制透明度
            对应roleName定义的RenderTransForm-->
        <Storyboard x:Key="roleNameIn">
            <DoubleAnimation
                Storyboard.TargetName="roleName"
                Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)"
                From="-300"
                To="0"
                Duration="0:0:0.35">
                <DoubleAnimation.EasingFunction>
                    <CubicEase EasingMode="EaseInOut" />
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
            <DoubleAnimation
                Storyboard.TargetName="roleName"
                Storyboard.TargetProperty="Opacity"
                From="0"
                To="1"
                Duration="0:0:0.35" />

        </Storyboard>
        <!--
            定义一个动画，用于角色立绘的进入动画，即，先移出去100，然后通过动画再移回来(TargetProperty为Image>RenderTransForm>TranslateTransform>X)，同时控制透明度
            对应protraitPic定义的RenderTransForm
        -->
        <Storyboard x:Key="protraitIn">
            <DoubleAnimation
                Storyboard.TargetName="protraitPic"
                Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)"
                From="400"
                To="100"
                Duration="0:0:0.35">
                <DoubleAnimation.EasingFunction>
                    <CubicEase EasingMode="EaseInOut" />
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
            <DoubleAnimation
                Storyboard.TargetName="protraitPic"
                Storyboard.TargetProperty="Opacity"
                From="0"
                To="1"
                Duration="0:0:0.35" />
        </Storyboard>
    </Window.Resources>
    <Window.DataContext>
        <vm:MainViewModel />
    </Window.DataContext>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="0.35*" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300" />
            <ColumnDefinition />
            <ColumnDefinition Width="350" />
        </Grid.ColumnDefinitions>



        <!--  背景  -->
        <Image
            Grid.RowSpan="2"
            Grid.ColumnSpan="3"
            RenderTransformOrigin="0.5,0.5"
            Source="https://cdn-cn.lingxigames.com/wukongbuild/ss/1.0.0/prod/views/static/bg.19f58a9d.jpg"
            Stretch="UniformToFill">
            <!--  定义ScaleTransform，来支持缩放动画  -->
            <Image.RenderTransform>
                <ScaleTransform />
            </Image.RenderTransform>
            <Image.Triggers>
                <!--  定义一个Loaded事件触发器，用于启动缩放动画，即启动加载时就启动动画，并且设置行为为Forever永久循环来回执行  -->
                <EventTrigger RoutedEvent="Loaded">
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                AutoReverse="True"
                                RepeatBehavior="Forever"
                                Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleX)"
                                From="1"
                                To="1.3"
                                Duration="0:0:30" />
                            <DoubleAnimation
                                AutoReverse="True"
                                RepeatBehavior="Forever"
                                Storyboard.TargetProperty="RenderTransform.(ScaleTransform.ScaleY)"
                                From="1"
                                To="1.3"
                                Duration="0:0:30" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Image.Triggers>
        </Image>

        <Image
            Grid.RowSpan="2"
            Grid.ColumnSpan="1"
            Source="https://cdn-cn.lingxigames.com/wukongbuild/star-gw/1.0.0/prod/views/static/nav-left-bg.6cc3bfdb.png"
            Stretch="UniformToFill" />
        <Image
            Grid.Row="0"
            Grid.RowSpan="1"
            Grid.Column="1"
            Grid.ColumnSpan="2"
            Source="https://cdn-cn.lingxigames.com/wukongbuild/star-gw/1.0.0/prod/views/static/person-title-bg.21fce8f0.png" />
        <!--  角色立绘  -->

        <!--  定义RenderTransform，用于动画效果,即，先移出去100，然后通过动画再移回来，同时控制透明度  -->
        <Image
            Name="protraitPic"
            Grid.Column="1"
            Grid.ColumnSpan="2"
            d:Source="http://image.aligames.com/s/y9s/g/2020/6/18/458266179125929477.png"
            Source="{Binding ProtraitImage}"
            Stretch="Uniform">
            <Image.RenderTransform>
                <TranslateTransform X="100" />
            </Image.RenderTransform>
        </Image>

        <!--  角色名字，利用Width限制为单字宽度，并且支持Wrap换行即可竖向显示文字  -->
        <TextBlock
            Name="roleName"
            Grid.Row="0"
            Grid.Column="1"
            Width="{Binding RelativeSource={RelativeSource Self}, Path=FontSize}"
            Margin="180,0,0,0"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            d:Text="曹操"
            Background="Transparent"
            FontFamily="华文中宋"
            FontSize="50" Opacity="0"
            Foreground="#c01e0c"
            Text="{Binding CurrentProtraitName}"
            TextWrapping="Wrap">
            <TextBlock.RenderTransform>
                <TranslateTransform X="-300" />
            </TextBlock.RenderTransform>
        </TextBlock>

        <Image
            Grid.Row="0"
            Grid.Column="1"
            Width="250"
            Margin="5"
            HorizontalAlignment="Left"
            VerticalAlignment="Top"
            Source="https://cdn-cn.lingxigames.com/wukongbuild/ss/1.0.0/prod/views/static/logo.a63b6644.png" />
        <ListBox
            Name="campListBox"
            Grid.RowSpan="3"
            Grid.Column="0"
            Background="#33f0f8ff"
            DataContext="{Binding RelativeSource={RelativeSource AncestorType=Window}, Path=DataContext}"
            ItemsSource="{Binding Camps}"
            ScrollViewer.CanContentScroll="False">

            <!--  定义Listbox的item容器样式，可以去除默认每个item的紧贴等  -->
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Margin="10,0" Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
            <!--  重写ListBoxItem的Template，定义每个ListBoxItem表现形式  -->
            <ListBox.ItemTemplate>

                <ItemContainerTemplate>
                    <Border>
                        <RadioButton GroupName="{Binding RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=1}, Path=Name}" IsChecked="{Binding DefaultSelected}">
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Checked">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectCampCommand, RelativeSource={RelativeSource AncestorType=ListBox}}" CommandParameter="{Binding}" />
                                </i:EventTrigger>
                                <i:EventTrigger EventName="UnChecked">
                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectCampCommand, RelativeSource={RelativeSource AncestorType=ListBox}}" CommandParameter="{Binding}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>
                            <RadioButton.Style>
                                <Style TargetType="RadioButton">
                                    <!--  设置RadioButton样式的Template，使RadioButton的样式为一个矩形和一个TextBlock，TextBlock显示阵营，矩形显示阵营颜色，选中时矩形颜色变为蓝色，未选中时矩形颜色变为红色，同时TextBlock和矩形都会旋转45度，使其显示为菱形。  -->
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Grid>

                                                    <StackPanel Orientation="Vertical">
                                                        <Grid
                                                            Margin="0,20"
                                                            Background="Transparent"
                                                            Cursor="Hand">
                                                            <Rectangle
                                                                Name="smallRect"
                                                                Width="45"
                                                                Height="45"
                                                                RenderTransformOrigin="0.5,0.5">
                                                                <Rectangle.Fill>
                                                                    <LinearGradientBrush>
                                                                        <GradientStop Color="#311012" />
                                                                        <GradientStop Offset="1" Color="#811e24" />
                                                                    </LinearGradientBrush>
                                                                </Rectangle.Fill>
                                                                <!--  矩形显示阵营，定义RenderTransform来旋转  -->
                                                                <Rectangle.RenderTransform>
                                                                    <RotateTransform Angle="45" />
                                                                </Rectangle.RenderTransform>

                                                                <!--  设置选中时的颜色  -->
                                                                <i:Interaction.Triggers>
                                                                    <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=RadioButton, AncestorLevel=1}, Path=IsChecked}" Value="True">
                                                                        <i:ChangePropertyAction PropertyName="Fill" TargetName="smallRect">
                                                                            <i:ChangePropertyAction.Value>
                                                                                <LinearGradientBrush>
                                                                                    <GradientStop Color="#8b1911" />
                                                                                    <GradientStop Offset="1" Color="#d86249" />
                                                                                </LinearGradientBrush>
                                                                            </i:ChangePropertyAction.Value>
                                                                        </i:ChangePropertyAction>
                                                                    </i:DataTrigger>
                                                                    <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=RadioButton, AncestorLevel=1}, Path=IsChecked}" Value="False">
                                                                        <i:ChangePropertyAction PropertyName="Fill" TargetName="smallRect">
                                                                            <i:ChangePropertyAction.Value>
                                                                                <LinearGradientBrush>
                                                                                    <GradientStop Color="#311012" />
                                                                                    <GradientStop Offset="1" Color="#811e24" />
                                                                                </LinearGradientBrush>
                                                                            </i:ChangePropertyAction.Value>
                                                                        </i:ChangePropertyAction>
                                                                    </i:DataTrigger>

                                                                </i:Interaction.Triggers>
                                                            </Rectangle>
                                                            <TextBlock
                                                                HorizontalAlignment="Center"
                                                                VerticalAlignment="Center"
                                                                FontFamily="宋体"
                                                                FontSize="20"
                                                                FontWeight="DemiBold"
                                                                Foreground="White"
                                                                Text="{Binding Camp, Converter={StaticResource campToString}}" />
                                                            <ContentPresenter />
                                                        </Grid>
                                                        <!--  用于展示所有武将的列表，作为RadioButton的样式Template中定义呈现  -->
                                                        <ListBox
                                                            Name="charListBox"
                                                            Background="Transparent"
                                                            ItemsSource="{Binding Roles}">
                                                            <!--  重写style去除listbox的默认边框  -->
                                                            <ListBox.Style>
                                                                <Style TargetType="ListBox">
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="ListBox">
                                                                                <ItemsPresenter />
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </ListBox.Style>
                                                            <!--  重写itemcontainerstyle去除listboxitem的默认鼠标经过边框  -->
                                                            <ListBox.ItemContainerStyle>
                                                                <Style TargetType="ListBoxItem">
                                                                    <Setter Property="Template">
                                                                        <Setter.Value>
                                                                            <ControlTemplate TargetType="ListBoxItem">
                                                                                <ContentPresenter />
                                                                            </ControlTemplate>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </Style>
                                                            </ListBox.ItemContainerStyle>
                                                            <i:Interaction.Triggers>
                                                                <!--  选中角色立绘事件  -->
                                                                <i:EventTrigger EventName="SelectionChanged">
                                                                    <i:InvokeCommandAction Command="{Binding DataContext.SelectProtraitCommand, RelativeSource={RelativeSource AncestorType=ListBox, AncestorLevel=2}}" CommandParameter="{Binding SelectedItem, ElementName=charListBox}" />
                                                                    <!--  启动在Resources定义的动画  -->
                                                                    <i:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource protraitIn}" />
                                                                    <i:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource roleNameIn}" />
                                                                </i:EventTrigger>
                                                                <!--  控制Visibility可以让列表响应不了点击  -->
                                                                <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=RadioButton, AncestorLevel=1}, Path=IsChecked}" Value="False">
                                                                    <i:ChangePropertyAction
                                                                        PropertyName="Visibility"
                                                                        TargetName="charListBox"
                                                                        Value="Hidden" />
                                                                </i:DataTrigger>
                                                                <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=RadioButton, AncestorLevel=1}, Path=IsChecked}" Value="True">
                                                                    <i:ChangePropertyAction
                                                                        PropertyName="Visibility"
                                                                        TargetName="charListBox"
                                                                        Value="Visible" />
                                                                </i:DataTrigger>
                                                            </i:Interaction.Triggers>
                                                            <ListBox.ItemTemplate>
                                                                <!--  定义ListBoxItem的展现形式  -->
                                                                <DataTemplate>
                                                                    <Border
                                                                        x:Name="roleIconBorder"
                                                                        Margin="0,0,0,15"
                                                                        Padding="1"
                                                                        Background="#30808080"
                                                                        CornerRadius="3"
                                                                        Cursor="Hand">
                                                                        <Grid>
                                                                            <Grid.RowDefinitions>
                                                                                <RowDefinition />
                                                                                <RowDefinition />
                                                                            </Grid.RowDefinitions>

                                                                            <Image
                                                                                Name="roleIcon"
                                                                                Grid.Row="0"
                                                                                Width="90"
                                                                                Source="{Binding Icon}"
                                                                                Stretch="Uniform" />
                                                                            <Border
                                                                                x:Name="roleIconNameBorder"
                                                                                Grid.Row="1"
                                                                                Padding="3"
                                                                                Background="White"
                                                                                CornerRadius="3 3 0 0">
                                                                                <TextBlock
                                                                                    Name="roleIconNameTextBlock"
                                                                                    HorizontalAlignment="Center"
                                                                                    FontFamily="黑体"
                                                                                    FontSize="15"
                                                                                    Foreground="Black"
                                                                                    Text="{Binding Name}" />
                                                                            </Border>

                                                                        </Grid>



                                                                    </Border>
                                                                    <DataTemplate.Triggers>
                                                                        <!--  文字和背景，黑白色交换  -->
                                                                        <Trigger Property="IsMouseOver" Value="True">
                                                                            <Setter TargetName="roleIconNameBorder" Property="Background" Value="#000000" />
                                                                            <Setter TargetName="roleIconNameTextBlock" Property="Foreground" Value="White" />
                                                                        </Trigger>
                                                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" Value="True">
                                                                            <!--  让图像背景渐变  -->
                                                                            <Setter TargetName="roleIconBorder" Property="Background">
                                                                                <Setter.Value>
                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                                                                        <GradientStop Color="#111" />
                                                                                        <GradientStop Offset="1" Color="#7000" />
                                                                                    </LinearGradientBrush>
                                                                                </Setter.Value>
                                                                            </Setter>

                                                                        </DataTrigger>
                                                                        <!--  让图像变成灰色，即未选中状态  -->
                                                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=IsSelected}" Value="False">
                                                                            <Setter TargetName="roleIcon" Property="Source" Value="{Binding Icon, Converter={StaticResource convGrayImage}}" />
                                                                            <Setter TargetName="roleIconBorder" Property="Background" Value="Gray" />
                                                                        </DataTrigger>

                                                                    </DataTemplate.Triggers>
                                                                </DataTemplate>

                                                            </ListBox.ItemTemplate>
                                                        </ListBox>

                                                    </StackPanel>
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>


                            </RadioButton.Style>

                        </RadioButton>
                    </Border>
                </ItemContainerTemplate>
            </ListBox.ItemTemplate>
            <!--  去除默认的鼠标移动样式  -->
            <ListBox.ItemContainerStyle>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="ListBoxItem">
                                <ContentPresenter />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </ListBox.ItemContainerStyle>
        </ListBox>
        <!--<Button  Content="点击" Command="{Binding SelectProtraitaaaCommand}" ></Button>-->
    </Grid>
</Window>
